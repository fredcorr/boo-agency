@mixin font-size($fs-map, $fs-breakpoints: $breakpoints) {

  @each $fs-breakpoint, $fs-font-size in $fs-map {
    @if $fs-breakpoint == null {
      @include make-font-size($fs-font-size);
    } @else {
      // If $fs-font-size is a key that exists in
      // $fs-breakpoints, use the value
      @if map-has-key($fs-breakpoints, $fs-breakpoint) {
        $fs-breakpoint: map-get($fs-breakpoints, $fs-breakpoint);
      }
      @media screen and (min-width: $fs-breakpoint) {
        @include make-font-size($fs-font-size);
      }
    }
  }
}

@mixin make-font-size($fs-font-size) {
  // If $fs-font-size is a list, include
  // both font-size and line-height
  @if type-of($fs-font-size) == 'list' {
    font-size: rem(nth($fs-font-size, 1));
    @if (length($fs-font-size) > 1) {
      line-height: rem(nth($fs-font-size, 2));
    }
  } @else {
    font-size: rem($fs-font-size);
  }
}

@mixin media-breakpoint-up($name, $breakpoints: $breakpoints) {
  $min: breakpoint-min($name, $breakpoints);
  @if $min {
    @media (min-width: $min) {
      @content;
    }
  } @else {
    @content;
  }
}

@mixin media-breakpoint-down($name, $breakpoints: $breakpoints) {
  $max: breakpoint-max($name, $breakpoints);
  @if $max {
    @media (max-width: $max) {
      @content;
    }
  } @else {
    @content;
  }
}

@mixin media-breakpoint-between($lower, $upper, $breakpoints: $breakpoints) {
  $min: breakpoint-min($lower, $breakpoints);
  $max: breakpoint-max($upper, $breakpoints);

  @if $min != null and $max != null {
    @media (min-width: $min) and (max-width: $max) {
      @content;
    }
  } @else if $max == null {
    @include media-breakpoint-up($lower, $breakpoints) {
      @content;
    }
  } @else if $min == null {
    @include media-breakpoint-down($upper, $breakpoints) {
      @content;
    }
  }
}

@mixin site-grid-column-gap {
  column-gap: $grid-gutter-sm;

  @include media-breakpoint-up(md) {
    column-gap: $grid-gutter-md;
  }

  @include media-breakpoint-up(lg) {
    column-gap: $grid-gutter-lg;
  }
}

@mixin site-grid-row-gap {
  row-gap: $grid-gutter-sm;

  @include media-breakpoint-up(md) {
    row-gap: $grid-gutter-md;
  }

  @include media-breakpoint-up(lg) {
    row-gap: $grid-gutter-lg;
  }
}

@mixin site-grid-padding {
  padding-right: $grid-padding-sm;
  padding-left: $grid-padding-sm;

  @include media-breakpoint-up(md) {
    padding-right: $grid-padding-md;
    padding-left: $grid-padding-md;
  }

  @include media-breakpoint-up(lg) {
    padding-right: $grid-padding-lg;
    padding-left: $grid-padding-lg;
  }
}

@mixin container-max-width() {
  width: 100%;
  max-width: 1440px;
  align-self: center;
}

@mixin site-grid($cols: 12) {
  @include site-grid-column-gap;
  @include site-grid-padding;

  grid-template-columns: repeat($cols, [col-start] 1fr);
  align-self: center;
  display: grid;
}
